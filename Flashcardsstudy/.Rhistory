mutate(
StoreID = as.factor(StoreID),
TerminalID = as.factor(TerminalID),
TransactionTime = ymd_hms(TransactionTime),
ItemsPerTransaction = as.numeric(ItemsPerTransaction),
IsExpress = as.factor(IsExpress)
)
transaction_data <- transaction_data %>%
mutate(
Date = as.Date(TransactionTime),
Hour = hour(TransactionTime),
Minute = minute(TransactionTime),
DayOfWeek = wday(TransactionTime, label = TRUE),
IsWeekend = DayOfWeek %in% c('Sat', 'Sun'),
IsLunchRush = Hour >= 11 & Hour < 14,   # 11 AM to 1:59 PM
IsDinnerRush = Hour >= 17 & Hour < 20   # 5 PM to 7:59 PM
)
transaction_data <- transaction_data %>%
mutate(
Date = as.Date(TransactionTime),
Hour = hour(TransactionTime),
Minute = minute(TransactionTime),
DayOfWeek = wday(TransactionTime, label = TRUE),
IsWeekend = DayOfWeek %in% c('Sat', 'Sun'),
IsLunchRush = Hour >= 11 & Hour < 14,   # 11 AM to 1:59 PM
IsDinnerRush = Hour >= 17 & Hour < 20   # 5 PM to 7:59 PM
)
rlang::last_trace()
transaction_data <- transaction_data %>%
mutate(
Date = as.Date(TransactionTime),
Hour = hour(TransactionTime),
Minute = minute(TransactionTime),
DayOfWeek = wday(TransactionTime),
IsWeekend = DayOfWeek %in% c('Sat', 'Sun'),
IsLunchRush = Hour >= 11 & Hour < 14,   # 11 AM to 1:59 PM
IsDinnerRush = Hour >= 17 & Hour < 20   # 5 PM to 7:59 PM
)
aggregated_data <- transaction_data %>%
group_by(StoreID, TerminalID, Date, Hour) %>%
summarize(
TotalTransactions = n(),
AverageBasketSize = mean(ItemsPerTransaction, na.rm = TRUE),
MedianBasketSize = median(ItemsPerTransaction, na.rm = TRUE),
PercentageHighQuantity = mean(ItemsPerTransaction > 10, na.rm = TRUE),
IsExpress = first(IsExpress),
DayOfWeek = first(DayOfWeek),
IsWeekend = first(IsWeekend),
IsLunchRush = first(IsLunchRush),
IsDinnerRush = first(IsDinnerRush),
.groups = 'drop'
)
aggregated_data <- aggregated_data %>%
mutate(
IsWeekend = as.factor(IsWeekend),
IsLunchRush = as.factor(IsLunchRush),
IsDinnerRush = as.factor(IsDinnerRush)
)
data_split <- initial_split(aggregated_data, prop = 0.8, strata = IsExpress)
training_data <- training(data_split)
testing_data <- testing(data_split)
express_recipe <- recipe(IsExpress ~ ., data = training_data) %>%
# Remove identifiers
update_role(StoreID, TerminalID, Date, new_role = "ID") %>%
# Convert categorical variables to factors (if not already)
step_string2factor(all_nominal_predictors()) %>%
# Handle missing values if any
step_impute_median(all_numeric_predictors()) %>%
# One-hot encode categorical variables
step_dummy(all_nominal_predictors(), -all_outcomes(), one_hot = TRUE) %>%
# Normalize numeric predictors
step_normalize(all_numeric_predictors())
rf_model <- rand_forest(
mode = "classification",
mtry = tune(),
trees = 500,
min_n = tune()
) %>%
set_engine("ranger", importance = "impurity")
workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(express_recipe)
cv_folds <- vfold_cv(training_data, v = 5, strata = IsExpress)
rf_grid <- grid_regular(
mtry(range = c(2, 10)),
min_n(range = c(2, 10)),
levels = 5
)
tune_results <- tune_grid(
workflow,
resamples = cv_folds,
grid = rf_grid,
metrics = metric_set(accuracy, roc_auc),
control = control_grid(save_pred = TRUE)
)
best_params <- select_best(tune_results, "roc_auc")
final_workflow <- finalize_workflow(
workflow,
best_params
)
final_fit <- final_workflow %>%
last_fit(data_split)
recipe <- recipe(target ~ ., data = your_data) %>%
step_zv(all_predictors()) %>%    # Remove columns with zero variance
step_dummy(all_nominal_predictors())
recipe <- recipe(target ~ ., data = aggregated_data) %>%
step_zv(all_predictors()) %>%    # Remove columns with zero variance
step_dummy(all_nominal_predictors())
recipe <- recipe(IsExpress ~ ., data = aggregated_data) %>%
step_zv(all_predictors()) %>%    # Remove columns with zero variance
step_dummy(all_nominal_predictors())
tune_results <- tune_grid(
workflow,
resamples = cv_folds,
grid = rf_grid,
metrics = metric_set(accuracy, roc_auc),
control = control_grid(save_pred = TRUE)
)
library(rpart)
library(rpart.plot)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("Matrix")
install.packages("Matrix")
install.packages("gains")
library(rpart)
library(rpart.plot)
library(randomForest)
library(xgboost)
install.packages("xgboost")
library(rpart)
library(rpart.plot)
library(randomForest)
library(xgboost)
library(Matrix)
library(caret)
library(gains)
ebay.df <- read.csv("eBayAuctions.csv")
ebay.df <- read.csv("eBayAuctions.csv")
ebay.df <- read.csv("C:\\Users\\alexh\\OneDrive\\Desktop\\Predictive Analytics\\Chapter 7\\eBayAuctions.csv")
lapply(ebay.df, class)
ebay.df <- read.csv("C:\\Users\\alexh\\OneDrive\\Desktop\\Predictive Analytics\\Chapter 7\\eBayAuctions.csv")
lapply(ebay.df, class)
ebay.df <- ebay.df |>
mutate(Duration = as.factor(Duration)) |>
mutate(Competitive. = as.factor(Competitive.))
library(tidyverse)
ebay.df <- ebay.df |>
mutate(Duration = as.factor(Duration)) |>
mutate(Competitive. = as.factor(Competitive.))
ebay.df <- read.csv("C:\\Users\\alexh\\OneDrive\\Desktop\\Predictive Analytics\\Chapter 7\\eBayAuctions.csv")
lapply(ebay.df, class)
ebay.df <- read.csv("C:\\Users\\alexh\\OneDrive\\Desktop\\Predictive Analytics\\Chapter 7\\eBayAuctions.csv")
lapply(ebay.df, class)
ebay.df <- ebay.df |>
mutate(Duration = as.factor(Duration)) |>
mutate(Competitive. = as.factor(Competitive.))
set.seed(1)
train.index <- sample(c(1:dim(ebay.df)[1]), dim(ebay.df)[1]*0.6)
valid.index <- setdiff(c(1:dim(ebay.df)[1]), train.index)
#Q2: complete the following codes to create training and validation datasets.
train.df <- ebay.df[train.index,]
valid.df <- ebay.df[valid.index,]
tr <- rpart(Competitive.~., data = train.df, cp=0.00001, minbucket = 50, maxdepth = 7)
#print cp of the newly fitted model.
options(scipen = 10)
printcp(tr)
pfit<- prune(tr, cp = tr$cptable[which.min(tr$cptable[,"xerror"]),"CP"])
tr$cptable[which.min(tr$cptable[,"xerror"]),"CP"]
prp(tr)
t(t(names(ebay.df)))
tr$cptable[which.min(tr$cptable[,"xerror"]),"CP"]
# Display the full row of `cptable` with the minimum `xerror`
tr$cptable[which.min(tr$cptable[, "xerror"]), ]
tr
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) } return(outlier.vec) }
tukey_multiple <- function(x) {
outliers <- array(TRUE, dim = dim(x))  # Initialize an array to track outliers
for (j in 1:ncol(x)) {
outliers[, j] <- tukey.outlier(x[, j])  # Update with outlier check for each column
}
outlier.vec <- vector(length = nrow(x))  # Vector to track rows with all outliers
for (i in 1:nrow(x)) {
outlier.vec[i] <- all(outliers[i, ])  # Check if all columns in a row are outliers
}
return(outlier.vec)
}
outliers[,j] <- outliers[,j] <- tukey.outlier(x[,j])
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] <- tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) } return(outlier.vec) }
knitr::opts_chunk$set(echo = TRUE)
flashcards <- function(){
question = character(),
flashcards <- function() {
flashcards_data <- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
---
title: "Flashcard Package Functions"
author: "Alex"
date: "`r Sys.Date()`"
output: html_document
---
```{r setup, include=FALSE}
flashcards <- function() {
flashcards_data <- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
flashcards <- function()
flashcards_data <- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
setwd("~/alexhpackage")
knitr::opts_chunk$set(echo = TRUE)
add_flashcards <- function() {
repeat{
question <- readline(prompt = "Enter the flashcard question (or press Enter to stop adding): ")
if(question=="") break
answer <- readline(prompt - "Enter the flashcard answer: ")
flashcards_data <<- rbind(flashcards_data,data.frame(question=question,answer = answer, correct=0, total))
}
}
add_flashcards()
add_flashcards()
add_flashcards <- function() {
repeat {
question <- readline(prompt = "Enter the flashcard question (or press ENTER to stop adding): ")
if (nchar(question) == 0) break
answer <- readline(prompt = "Enter the flashcard answer: ")
flashcards_data <<- rbind(flashcards_data, data.frame(question = question, answer = answer, correct = 0, total = 0, stringsAsFactors = FALSE))
}
}
add_flashcards()
study_flashcards <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available to study. Please add some flashcards first.\n")
return()
}
repeat {
index <- sample(1:nrow(flashcards_data), 1)
question <- flashcards_data$question[index]
answer <- flashcards_data$answer[index]
cat("Question: ", question, "\n")
user_answer <- readline(prompt = "Your answer: ")
if (tolower(user_answer) == tolower(answer)) {
cat("Correct!\n\n")
flashcards_data$correct[index] <<- flashcards_data$correct[index] + 1
} else {
cat("Incorrect. Correct answer is: ", answer, "\n\n")
}
flashcards_data$total[index] <<- flashcards_data$total[index] + 1
choice <- readline(prompt = "Do you want to continue studying? (yes/no): ")
if (tolower(choice) != "yes") break
}
}
study_flashcards()
view_progress <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available. Please add some flashcards first.\n")
return()
}
cat("\nFlashcard Progress:\n")
for (i in 1:nrow(flashcards_data)) {
cat(sprintf("%s: %d correct out of %d attempts\n",
flashcards_data$question[i],
flashcards_data$correct[i],
flashcards_data$total[i]))
}
cat("\n")
}
main_menu()
flashcards <- function()
flashcards_data <- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
add_flashcards <- function() {
repeat {
question <- readline(prompt = "Enter the flashcard question (or press ENTER to stop adding): ")
if (nchar(question) == 0) break
answer <- readline(prompt = "Enter the flashcard answer: ")
flashcards_data <<- rbind(flashcards_data, data.frame(question = question, answer = answer, correct = 0, total = 0, stringsAsFactors = FALSE))
}
}
add_flashcards <- function() {
repeat {
question <- readline(prompt = "Enter the flashcard question (or press ENTER to stop adding): ")
if (nchar(question) == 0) break
answer <- readline(prompt = "Enter the flashcard answer: ")
flashcards_data <<- rbind(flashcards_data, data.frame(question = question, answer = answer, correct = 0, total = 0, stringsAsFactors = FALSE))
}
}
study_flashcards <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available to study. Please add some flashcards first.\n")
return()
}
repeat {
index <- sample(1:nrow(flashcards_data), 1)
question <- flashcards_data$question[index]
answer <- flashcards_data$answer[index]
cat("Question: ", question, "\n")
user_answer <- readline(prompt = "Your answer: ")
if (tolower(user_answer) == tolower(answer)) {
cat("Correct!\n\n")
flashcards_data$correct[index] <<- flashcards_data$correct[index] + 1
} else {
cat("Incorrect. Correct answer is: ", answer, "\n\n")
}
flashcards_data$total[index] <<- flashcards_data$total[index] + 1
choice <- readline(prompt = "Do you want to continue studying? (yes/no): ")
if (tolower(choice) != "yes") break
}
}
view_progress <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available. Please add some flashcards first.\n")
return()
}
cat("\nFlashcard Progress:\n")
for (i in 1:nrow(flashcards_data)) {
cat(sprintf("%s: %d correct out of %d attempts\n",
flashcards_data$question[i],
flashcards_data$correct[i],
flashcards_data$total[i]))
}
cat("\n")
}
main_menu()
flashcards <- function() {
flashcards_data <<- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
flashcards <- function() {
# Define flashcards_data at the top level to ensure it is available globally in the program
flashcards_data <<- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
add_flashcards <- function() {
repeat {
question <- readline(prompt = "Enter the flashcard question (or press ENTER to stop adding): ")
if (nchar(question) == 0) break  # Check if input is empty
answer <- readline(prompt = "Enter the flashcard answer: ")
# Use <<- to update the global flashcards_data
flashcards_data <<- rbind(flashcards_data, data.frame(question = question, answer = answer, correct = 0, total = 0, stringsAsFactors = FALSE))
}
}
flashcards <- function() {
# Define flashcards_data at the top level to ensure it is available globally in the program
flashcards_data <<- data.frame(
question = character(),
answer = character(),
correct = integer(),
total = integer(),
stringsAsFactors = FALSE
)
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
main_menu <- function() {
repeat {
choice <- menu(c("Add Flashcards", "Study Flashcards", "View Progress", "Exit"), title = "Flashcard Program Menu")
switch(choice,
add_flashcards(),
study_flashcards(),
view_progress(),
break)
}
}
add_flashcards <- function() {
repeat {
question <- readline(prompt = "Enter the flashcard question (or press ENTER to stop adding): ")
if (nchar(question) == 0) break
answer <- readline(prompt = "Enter the flashcard answer: ")
flashcards_data <<- rbind(flashcards_data, data.frame(question = question, answer = answer, correct = 0, total = 0, stringsAsFactors = FALSE))
}
}
study_flashcards <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available to study. Please add some flashcards first.\n")
return()
}
repeat {
index <- sample(1:nrow(flashcards_data), 1)
question <- flashcards_data$question[index]
answer <- flashcards_data$answer[index]
cat("Question: ", question, "\n")
user_answer <- readline(prompt = "Your answer: ")
if (tolower(user_answer) == tolower(answer)) {
cat("Correct!\n\n")
flashcards_data$correct[index] <<- flashcards_data$correct[index] + 1
} else {
cat("Incorrect. Correct answer is: ", answer, "\n\n")
}
flashcards_data$total[index] <<- flashcards_data$total[index] + 1
choice <- readline(prompt = "Do you want to continue studying? (yes/no): ")
if (tolower(choice) != "yes") break
}
}
view_progress <- function() {
if (nrow(flashcards_data) == 0) {
cat("No flashcards available. Please add some flashcards first.\n")
return()
}
cat("\nFlashcard Progress:\n")
for (i in 1:nrow(flashcards_data)) {
cat(sprintf("%s: %d correct out of %d attempts\n",
flashcards_data$question[i],
flashcards_data$correct[i],
flashcards_data$total[i]))
}
cat("\n")
}
main_menu()
